#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Workflow
 * Module:  ProcessInst
 * Descrption:
 * CreateDate: 2010/11/18 12:00:09
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using AgileEAP.Core;

using AgileEAP.Core.Service;
using AgileEAP.Core.Security;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Web;
using AgileEAP.Core.Caching;
using AgileEAP.Core.FastInvoker;

using AgileEAP.WebControls;
using AgileEAP.Workflow.Domain;

using AgileEAP.Workflow.Engine;

namespace AgileEAP.Plugin.Workflow
{
    public partial class ProcessInstManager : BasePage
    {
        #region ---界面处理方法---

        /// <summary>
        /// 初始化页面
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            gvList.PageChanged += new PagedGridView.PagintEventHandler(gvList_PageChanged);
        }

        void gvList_PageChanged(object sender, PagingArgs e)
        {
            ShowList(gvList, new PageInfo(e.PageIndex, e.PageSize, e.ItemCount));
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                ShowList(gvList, new PageInfo(gvList.PageIndex, gvList.PageSize, gvList.ItemCount));
            }
        }

        #endregion

        #region ---操作处理方法---


        /// <summary>
        /// 查询
        /// </summary>
        public void Search()
        {
            ShowList(gvList, new PageInfo(1, gvList.PageSize, gvList.ItemCount));
        }


        /// <summary>
        /// 显示列表信息
        /// </summary>
        /// <param name="gvList">GridView对象</param>
        /// <param name="pageInfo">分页信息</param>
        public void ShowList(PagedGridView gvList, PageInfo pageInfo)
        {
            IPageOfList<ProcessInst> result = repository.FindAll<ProcessInst>(GetFilterParameters(), "Order by StartTime desc", pageInfo);
            gvList.ItemCount = result.PageInfo.ItemCount;
            gvList.DataSource = result;
            gvList.DataBind();
        }

        /// <summary>
        /// 将当前状态改为“挂起”
        /// </summary>
        /// <returns></returns>
        public string Suspended(string processInstID)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string actionMessage = string.Format("挂起流程实例{0}", processInstID);
            try
            {
                IWorkflowEngine engine = new WorkflowEngine();
                engine.TerminateProcessInst(processInstID);
                ajaxResult.Result = DoResult.Success;
                ajaxResult.RetValue = AgileEAP.Workflow.Enums.ProcessInstStatus.Running.GetRemark();
                ajaxResult.PromptMsg = actionMessage + "成功";
            }
            catch (Exception ex)
            {
                log.Error(actionMessage + "出错", ex);
            }
            finally
            {
                AddActionLog<ProcessInst>(actionMessage, ajaxResult.Result);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        public string Terminate(string processInstID)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string actionMessage = string.Format("终止流程实例{0}", processInstID);
            try
            {
                IWorkflowEngine engine =new WorkflowEngine();
                engine.TerminateProcessInst(processInstID);
                ajaxResult.Result = DoResult.Success;
                ajaxResult.RetValue = AgileEAP.Workflow.Enums.ProcessInstStatus.Running.GetRemark();
                ajaxResult.PromptMsg = actionMessage + "成功";
            }
            catch (Exception ex)
            {
                log.Error(actionMessage + "出错", ex);
            }
            finally
            {
                AddActionLog<ProcessInst>(actionMessage, ajaxResult.Result);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        public string Delete(string processInstID)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string actionMessage = string.Format("删除流程实例{0}", processInstID);
            try
            {
                IWorkflowEngine engine = new WorkflowEngine();
                engine.DeleteProcessInst(processInstID);
                ajaxResult.Result = DoResult.Success;
                ajaxResult.RetValue = AgileEAP.Workflow.Enums.ProcessInstStatus.Running.GetRemark();
                ajaxResult.PromptMsg = actionMessage + "成功";
            }
            catch (Exception ex)
            {
                log.Error(actionMessage + "出错", ex);
            }
            finally
            {
                AddActionLog<ProcessInst>(actionMessage, ajaxResult.Result);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        /// <summary>
        /// 将当前状态改为“运行”
        /// </summary>
        /// <returns></returns>
        public string Resume(string processInstID)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string actionMessage = string.Format("恢复流程实例{0}", processInstID);
            try
            {
                IWorkflowEngine engine = new WorkflowEngine();
                engine.ResumeProcessInst(processInstID);
                ajaxResult.Result = DoResult.Success;
                ajaxResult.RetValue = AgileEAP.Workflow.Enums.ProcessInstStatus.Running.GetRemark();
                ajaxResult.PromptMsg = actionMessage + "成功";
            }
            catch (Exception ex)
            {
                log.Error(actionMessage + "出错", ex);
            }
            finally
            {
                AddActionLog<ProcessInst>(actionMessage, ajaxResult.Result);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }
      
        public string GetprocessDefID(string processInstID)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string actionMessage = string.Format("恢复流程实例{0}", processInstID);
            try
            {
                string id=repository.Query<ProcessInst>().Where(p => p.ID == processInstID).FirstOrDefault().ProcessDefID;
                ajaxResult.Result = DoResult.Success;
                ajaxResult.RetValue = id;
                ajaxResult.PromptMsg = actionMessage + "成功";
            }
            catch (Exception ex)
            {
                log.Error(actionMessage + "出错", ex);
            }
            finally
            {
                AddActionLog<ProcessInst>(actionMessage, ajaxResult.Result);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        } 
        #endregion
    }
}

#region Description
/*================================================================================
 *  Copyright (c) agile.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  RolePrivilege
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using AgileEAP.Core;
using AgileEAP.Core.Service;
using AgileEAP.Core.Security;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Web;
using AgileEAP.Core.Caching;
using AgileEAP.Core.Utility;
using AgileEAP.Core.FastInvoker;
using AgileEAP.WebControls;
using AgileEAP.Infrastructure.Domain;
using AgileEAP.Infrastructure.Service;



namespace AgileEAP.Plugin.Authorize
{

    public partial class RolePrivilegeManager : BasePage
    {
        AuthorizeService authService = new AuthorizeService();

        protected void Page_Load(object sender, EventArgs e)
        {

            string roleID = Request.QueryString["RoleID"];
            //初始化角色权限
            InitRolePrivilege(roleID);
        }



        /// <summary>
        /// 初始化树
        /// </summary>
        private void InitRolePrivilege(string roleID)
        {
            AjaxTree1.PostType = PostType.NoPost;
            AjaxTree1.IsAjaxLoad = false;
            AjaxTree1.ShowNodeIco = false;
            AjaxTree1.ShowCheckBox = true;
            AjaxTree1.Nodes.Clear();

            //Resource appResource = repository.All<Resource>().FirstOrDefault(o => o.ID == ApplicationContext.AppID);
            AgileEAP.Infrastructure.Domain.SysParam sysparam =repository.Query<SysParam>().FirstOrDefault(o=>o.Name=="AppID");
            string rootPriId = GetPidByResId(sysparam.Value);

            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("RoleID", roleID);
            IList<RolePrivilege> rolePrivileges =repository.FindAll<RolePrivilege>(parameters);
            List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();

            AjaxTreeNode appNode = new AjaxTreeNode()
            {
                ID = rootPriId,
                Text = sysparam.Description,
                Value = rootPriId,
                Tag = "root",
                IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/menu.gif", WebUtil.GetRootPath(), Skin),
                NodeState = NodeState.Open,
                Checked = privileges.Contains(rootPriId),

            };
            AjaxTree1.Nodes.Add(appNode);

            //取得当前登录角色的权限组合
            List<string> privilegeIDs = authService.GetPrivilegeIDs(User.ID);

            //根据权限id取到资源id集合
            List<string> resIDs =repository.All<Privilege>().Where(o => User.UserType == (short)UserType.Administrator || privilegeIDs.Contains(o.ID)).Select(o => o.ResourceID).ToList();

            //根据权限id取到操作项id集合
            List<string> operateIds =repository.All<Privilege>().Where(p => !string.IsNullOrWhiteSpace(p.OperateID) && (User.UserType == (short)UserType.Administrator || privilegeIDs.Contains(p.ID))).Select(p => p.OperateID).ToList() ?? new List<string>();


            List<Resource> resources = repository.All<Resource>().Where(o => o.ParentID == sysparam.Value && (User.UserType == (short)UserType.Administrator || resIDs.Contains(o.ID))).OrderBy(o => o.SortOrder).ToList();


            foreach (Resource resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = priId,
                    Text = resource.Text,
                    Value = resource.ID,
                    Tag = ResourceType.Page.ToString(),
                    NodeState = NodeState.Open,
                    Checked = privileges.Contains(priId)
                };

                AddChildResource(node, privileges, resIDs, operateIds);
                appNode.ChildNodes.SafeAdd(node);
            }
        }





        void AddChildResource(AjaxTreeNode parentNode, List<string> privileges, List<string> resIDs, List<string> operateIds)
        {
            List<Resource> resources = repository.All<Resource>().Where(o => o.ParentID == parentNode.Value && resIDs.Contains(o.ID)).OrderBy(o => o.SortOrder).ToList();
            foreach (var resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = priId,
                    Text = resource.Text,
                    Value = resource.ID,
                    NodeState = NodeState.Close,
                    IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(resource.Type.Cast<ResourceType>(ResourceType.Menu))),
                    Checked = privileges.Contains(priId)
                };

                BuildOperate(node, privileges, operateIds);

                parentNode.ChildNodes.SafeAdd(node);
                AddChildResource(node, privileges, resIDs, operateIds);
            }
        }

        /// <summary>
        /// 绑定操作项（因为树用了级联，所以判断如果下边有操作项的时候，将模拟一个访问）
        /// </summary>
        /// <param name="parentNode">父节点</param>
        /// <param name="privileges">权限集合</param>
        void BuildOperate(AjaxTreeNode parentNode, List<string> privileges, List<string> operateIds)
        {
            List<Privilege> operates = repository.All<Privilege>().Where(p => p.ResourceID == parentNode.Value && !string.IsNullOrWhiteSpace(p.OperateID) && operateIds.Contains(p.OperateID)).ToList(); //取得资源相关的所有操作项id

            //   List<Operate> operates = new OperateService().All().Where(o => operateIDs.Contains(o.ID)).ToList(); //根据操作项id集合得到操作项集合

            //判断如果下边有操作项的时候，将模拟一个访问
            if (operates.Count > 0)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = "tempAccess",
                    Text = "访问",
                    Value = "tempAccess",
                    Tag = "Operate",
                    Checked = parentNode.Checked
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

            foreach (var operate in operates)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = operate.ID,
                    Text = operate.Name,
                    Value = operate.ID,
                    Tag = "Operate",
                    Checked = privileges.Contains(operate.ID)
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

        }


        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(ResourceType ResourceType)
        {
            string icon = "menu.gif";

            switch (ResourceType)
            {
                case ResourceType.Button:
                    icon = "menu.gif";
                    break;
                case ResourceType.Menu:
                    icon = "menu.gif";
                    break;
                case ResourceType.Page:
                    icon = "menu.gif";
                    break;
            }

            return icon;
        }

        /// <summary>
        /// 创建目录树方法
        /// </summary>
        /// <param name="tn">目录树的节点</param>
        private void BuildTree(AjaxTreeNode tn)
        {
            List<Resource> resources = repository.All<Resource>().Where(o => o.ParentID == tn.ID).OrderBy(o => o.SortOrder).ToList();

            foreach (var res in resources)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = res.ID,
                    Text = res.Text,
                    Value = res.ID,
                    Tag = res.Type.ToString(),
                    NodeIcoSrc = tn.NodeIcoSrc,
                    IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(res.Type.Cast<ResourceType>(ResourceType.Menu)))
                };

                tn.ChildNodes.Add(node);
                //递归获取目录树
                BuildTree(node);
            }
        }

        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            try
            {
                IList<string> parameters = argument.Trim(',').Split(',').ToList();

                string roleID = Request.QueryString["RoleID"];

                if (string.IsNullOrEmpty(roleID))
                {
                    ajaxResult.Result = DoResult.Failed;
                    ajaxResult.PromptMsg = "角色ID为空！";
                    log.Error("角色ID为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                if (parameters == null || parameters.Count == 0)
                {
                    ajaxResult.PromptMsg = "您没有选择任何资源，请选择后再保存！";
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                IList<RolePrivilege> rolePrivileges = parameters.Where(o => o != "tempAccess").Select(p => new RolePrivilege()
                {
                    ID = IdGenerator.NewComb().ToSafeString(),
                    RoleID = roleID,
                    PrivilegeID = p
                }).ToList();


                authService.SaveRolePrivilege(rolePrivileges);

                ajaxResult.RetValue = string.Empty;
                ajaxResult.Result = DoResult.Success;
                ajaxResult.PromptMsg = "保存成功！";
                WebUtil.CloseDialog();
            }
            catch (Exception ex)
            {
                ajaxResult.Result = DoResult.Failed;
                ajaxResult.PromptMsg = "保存角色出错，请联系管理员！";
                log.Error(ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }


        string GetPidByResId(string resourceID)
        {
            //  DataTable dt = repository.ExecuteDataTable<Privilege>(string.Format("select id from AC_Privilege where (type={0} or type={1}) and ResourceID='{2}'", (int)ResourceType.Menu, (int)ResourceType.Page, resourceID));

            IDictionary<string,object> parameters=new Dictionary<string,object>();
            parameters.SafeAdd("id",new AgileEAP.Core.Data.Condition(string.Format("(type={0} or type={1}) and ResourceID='{2}'", (int)ResourceType.Menu, (int)ResourceType.Page, resourceID)));

           var  p= repository.FindAll<Privilege>(parameters);
            if (p != null&&p.Count>0) return p[0].ID;

            return string.Empty;

           // return au new PrivilegeService().GetPidByResId(resourceID);
        }
    }
}

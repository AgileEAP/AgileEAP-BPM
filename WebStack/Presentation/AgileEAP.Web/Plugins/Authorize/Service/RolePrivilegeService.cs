#region Description
/*================================================================================
 *  Copyright (c) agile.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  RolePrivilege
 * Descrption:
 * CreateDate: 2010/11/18 13:55:35
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;


using System.Linq;


using AgileEAP.Core;
using AgileEAP.Core.Data;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Caching;
using AgileEAP.Core.Service;


using AgileEAP.Infrastructure.Domain;

namespace AgileEAP.Infrastructure.Service
{
    public class RolePrivilegeService :  BaseService<string,RolePrivilege>
    {
		#region Fields
		private readonly ILogger log = LogManager.GetLogger(typeof(RolePrivilegeService));
		#endregion
		
		#region Constructors
		
		public RolePrivilegeService(){ }
		#endregion

        #region IRolePrivilegeService Imp
        public void SaveRolePrivilege(IList<RolePrivilege> privileges)
        {

            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(RolePrivilege)))
            {
                //删除已经存在的
                repository.ExecuteSql<RolePrivilege>(string.Format("delete from AC_RolePrivilege where RoleID='{0}' and PrivilegeID not in (select ID from AC_Privilege where Type={1})", privileges[0].RoleID,(int)ResourceType.BizData));

                foreach (var p in privileges)
                {
                    repository.SaveOrUpdate(p);
                }
                trans.Commit();
            }
            ClearCache(typeof(RolePrivilege));
        }

        public void SaveRoleOperatePrivilege(IList<MetaData> metaData,IList<Privilege> privilege,IList<RolePrivilege> rolePrivileges)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(RolePrivilege)))
            {
                //删除已经存在的
                string roleID=rolePrivileges[0].RoleID;
                repository.ExecuteSql<MetaData>(string.Format(@"delete a from AC_MetaData a
                                                              join AC_Privilege b on a.ID=b.MetaDataID
                                                              join AC_RolePrivilege c on b.ID=c.PrivilegeID
                                                              where b.Type=4 and c.RoleID='{0}'", roleID));
                repository.ExecuteSql<Privilege>(string.Format(@"delete a from AC_Privilege a 
                                                                  join AC_RolePrivilege b on a.ID=b.PrivilegeID
                                                                  where a.Type=4 and b.RoleID='{0}'", roleID));
                
                repository.ExecuteSql<RolePrivilege>(string.Format("delete from AC_RolePrivilege where PrivilegeID in (select id from AC_Privilege where type=4) and RoleID='{0}'",roleID));

                foreach (var p in metaData)
                {
                    repository.SaveOrUpdate(p);
                }
                foreach (var p in privilege)
                {
                    repository.SaveOrUpdate(p);
                }
                foreach (var p in rolePrivileges)
                {
                    repository.SaveOrUpdate(p);
                }


                trans.Commit();
            }

            ClearCache(typeof(MetaData));
            ClearCache(typeof(Privilege));
            ClearCache(typeof(RolePrivilege));

        }

        public DataTable GetRolePrivilegeIDs(string roleIDs)
        {

            string cmdText = string.Format("select PrivilegeID from AC_RolePrivilege where roleid in ({0})",roleIDs);
            return repository.ExecuteDataTable<RolePrivilege>(cmdText, null); 
        }


        #endregion

        /// <summary>
        /// 删除已经存在的
        /// </summary>
        /// <param name="roleID"></param>
        public void DelRoleOperatePrivilege(string roleID)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(RolePrivilege)))
            {
                repository.ExecuteSql<MetaData>(string.Format(@"delete a from AC_MetaData a
                                                              join AC_Privilege b on a.ID=b.MetaDataID
                                                              join AC_RolePrivilege c on b.ID=c.PrivilegeID
                                                              where b.Type=4 and c.RoleID='{0}'", roleID));
                repository.ExecuteSql<Privilege>(string.Format(@"delete a from AC_Privilege a 
                                                                  join AC_RolePrivilege b on a.ID=b.PrivilegeID
                                                                  where a.Type=4 and b.RoleID='{0}'", roleID));

                repository.ExecuteSql<RolePrivilege>(string.Format("delete from AC_RolePrivilege where PrivilegeID in (select id from AC_Privilege where type=4) and RoleID='{0}'", roleID));

                trans.Commit();
            }

            ClearCache(typeof(MetaData));
            ClearCache(typeof(Privilege));
            ClearCache(typeof(RolePrivilege));
        }
		
		#region Internal Methods

        #endregion
    }
}
#region Description
/*================================================================================
 *  Copyright (c) agile.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  MetaData
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;



using AgileEAP.Core;

using AgileEAP.Core.Service;
using AgileEAP.Core.Security;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Web;
using AgileEAP.Core.Caching;
using AgileEAP.Core.Utility;
using AgileEAP.Core.FastInvoker;
using AgileEAP.WebControls;
using AgileEAP.Infrastructure.Domain;
using AgileEAP.Infrastructure.Service;



namespace AgileEAP.Plugin.Authorize
{
    public partial class MetaDataManager : BasePage
    {
        AuthorizeService authService = new AuthorizeService();

        protected void Page_Load(object sender, EventArgs e)
        {
            string roleID = Request.QueryString["RoleID"];
            InitTree(roleID);
        }

        /// <summary>
        /// 初始化树
        /// </summary>
        private void InitTree(string roleID)
        {
            AjaxTree1.PostType = PostType.NoPost;
            AjaxTree1.SelectionMode = SelectionMode.Single;
            AjaxTree1.ShowNodeIco = true;
            AjaxTree1.ShowCheckBox = true;
            AjaxTree1.IsAjaxLoad = false;
            AjaxTree1.Nodes.Clear();

            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("RoleID", roleID);
            IList<RolePrivilege> rolePrivileges =repository.FindAll<RolePrivilege>(parameters);
            List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();
            List<string> metaIDs = repository.FindAll<Privilege>(null).Where(o => privileges.Contains(o.ID) && !string.IsNullOrEmpty(o.MetaDataID)).Select(o => o.MetaDataID).ToList();
            List<string> orgIDs = repository.FindAll<MetaData>(null).Where(o => metaIDs.Contains(o.ID)).Select(o => o.Value).ToList();
            List<Organization> orgRoots = repository.Query<Organization>().Where(o => o.ParentID == "-1").ToList();
            if (orgRoots != null)
            {
                foreach (var org in orgRoots)
                {
                    AjaxTreeNode parentOrgNode = new AjaxTreeNode()
                    {
                        ID = org.ID,
                        Text = org.Name,
                        Value = org.Code,
                        Tag = org.Type.ToString(),
                        IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon("city")),
                        NodeState = NodeState.Open,
                        Checked = orgIDs.Exists(o => o.EndsWith(org.ID)),
                    };
                    AjaxTree1.Nodes.Add(parentOrgNode);
                    AddOrg(org, parentOrgNode, orgIDs);
                }
            }
            //List<Organization> orgs = sOrg.All().Where(o => o.ParentID == "-1").OrderBy(o => o.SortOrder).ToList();
            //IDictionary<string, object> parameters = new Dictionary<string, object>();
            //parameters.SafeAdd("RoleID", roleID);
            //IList<RolePrivilege> rolePrivileges = rolePrivilegeService.FindAll(parameters);
            //List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();
            //List<string> metaIDs = new AgileEAP.Infrastructure.Service.PrivilegeService().FindAll(null).Where(o => privileges.Contains(o.ID) && !string.IsNullOrEmpty(o.MetaDataID)).Select(o => o.MetaDataID).ToList();
            //List<string> orgIDs = new MetaDataService().FindAll(null).Where(o => metaIDs.Contains(o.ID)).Select(o => o.Value).ToList();
            ////if (User.UserType != 0)
            ////    orgs = orgs.Where(o => orgIDs.Contains(o.ID)).ToList();
            ////获取数据权限树加载深度
            //int maxDepth = AgileEAP.Core.Configure.Get<int>("DataPrivilegeTreeLoadDepth");
            //foreach (var org in orgs)
            //{
            //    AjaxTreeNode node = new AjaxTreeNode()
            //    {
            //        ID = org.ID,
            //        Text = org.Name,
            //        Value = org.ID,
            //        Tag = org.Type.ToString(),
            //        IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(org.Type.Cast<ResourceType>(ResourceType.Menu))),
            //        Checked = orgIDs.Exists(o => o.EndsWith(org.ID)),
            //        NodeState = NodeState.Open
            //    };
            //    BuildTree(node, orgIDs, maxDepth, 1);
            //    AjaxTree1.Nodes.Add(node);
            //}
        }


        private void AddOrg(Organization org, AjaxTreeNode parentOrgNode, List<string> orgIDs)
        {
            List<Organization> organizations = repository.Query<Organization>().Where(o => o.ParentID == org.ID).ToList();
            if (organizations != null && organizations.Count > 0)
            {
                foreach (var organization in organizations)
                {
                    AjaxTreeNode childOrgNode = new AjaxTreeNode()
                    {
                        ID = organization.ID,
                        Text = organization.Name,
                        Value = organization.ID,
                        Tag=organization.Type.ToString(),
                        Checked = orgIDs.Exists(o => o.EndsWith(organization.ID)),
                        IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon("city")),
                        NodeState =NodeState.Close,
                    };
                    parentOrgNode.ChildNodes.Add(childOrgNode);
                    //AddVirtualMachine(childOrgNode);
                    AddOrg(organization, childOrgNode,  orgIDs );
                }
            }
        }
        /// <summary>
        /// 创建目录树方法
        /// </summary>
        /// <param name="tn">目录树的节点</param>
        private void BuildTree(AjaxTreeNode tn, List<string> orgIDs, int maxDepth, int currentDepth)
        {
            if (maxDepth <= currentDepth) return;

            List<Organization> organizations =repository.All<Organization>().Where(o => o.ParentID == tn.ID).OrderBy(o => o.SortOrder).ToList();

            foreach (var org in organizations)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = org.ID,
                    Text = org.Name,
                    Value = org.Code,
                    Tag = org.Type.ToString(),
                    NodeIcoSrc = tn.NodeIcoSrc,
                    LinkUrl = string.Format("{0}AuthorizeCenter/OrgUserList.aspx?orgid={1}", WebUtil.GetRootPath(), org.ID),
                    Target = "_blank",
                    IcoSrc = string.Format("{0}Plugins/Authorize/Content/Themes/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(org.Type.Cast<ResourceType>(ResourceType.Menu))),
                    Checked = orgIDs.Exists(o => o.EndsWith(org.ID))
                };

                tn.ChildNodes.Add(node);

                BuildTree(node, orgIDs, maxDepth, currentDepth + 1);
            }
        }

        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(ResourceType ResourceType)
        {
            string icon = "orgtree.gif";

            switch (ResourceType)
            {
                case ResourceType.Button:
                    icon = "orgtree.gif";
                    break;
                case ResourceType.Menu:
                    icon = "orgtree.gif";
                    break;
                case ResourceType.Page:
                    icon = "orgtree.gif";
                    break;
            }

            return icon;
        }


        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(string dictType)
        {
            string icon = "menu.gif";

            switch (dictType)
            {
                case "city":
                    icon = "organzation.gif";
                    break;
                case "customer":
                    icon = "group.png";
                    break;
                case "vm":
                    icon = "server.png";
                    break;
                case "catalog":
                    icon = "prifolder.gif"; //"folder_server.png";//
                    break;
                case "unCategorized":
                    icon = "folder_metadata.png";
                    break;
            }

            return icon;
        }

        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            try
            {
                IList<AjaxTreeNode> parameters = JsonConvert.DeserializeObject<IList<AjaxTreeNode>>(argument);

                string roleID = Request.QueryString["RoleID"];

                if (string.IsNullOrEmpty(roleID))
                {
                    ajaxResult.Result = DoResult.Failed;
                    ajaxResult.PromptMsg = "角色ID为空！";
                    log.Error("角色ID为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                //if (parameters == null || parameters.Count == 0)
                //{
                //    ajaxResult.PromptMsg = "您没有选择任何单位部门，请选择后再保存！";
                //    return JsonConvert.SerializeObject(ajaxResult);
                //}

                if (parameters.Count>0)
                {
                    IList<MetaData> metaData = parameters.Select(p => new MetaData()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        Name = p.Text,
                        Value = authService.GetOrgCodePath(p.Value),
                        Creator = User.ID,
                        CreateTime = DateTime.Now,
                        OwnerOrg = GetOrgPath()
                    }).ToList();

                    IList<AgileEAP.Infrastructure.Domain.Privilege> privilege = metaData.Select(p => new AgileEAP.Infrastructure.Domain.Privilege()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        Name = p.Name,
                        MetaDataID = p.ID,
                        Creator = User.ID,
                        CreateTime = DateTime.Now,
                        Type = (int)ResourceType.BizData,
                      //  OwnerOrg = GetOrgPath()
                    }).ToList();

                    IList<RolePrivilege> rolePrivilege = privilege.Select(p => new RolePrivilege()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        RoleID = roleID,
                        PrivilegeID = p.ID
                    }).ToList();

                    authService.SaveRoleOperatePrivilege(metaData, privilege, rolePrivilege);
                }

                ajaxResult.RetValue = string.Empty;
                ajaxResult.Result = DoResult.Success;
                ajaxResult.PromptMsg = "保存成功！";
                WebUtil.CloseDialog();
            }
            catch (Exception ex)
            {
                ajaxResult.Result = DoResult.Failed;
                ajaxResult.PromptMsg = "保存角色出错，请联系管理员！";
                log.Error(ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }
    }
}

#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Infrastructure
 * Module:  Calendar
 * Descrption:
 * CreateDate: 2010/11/23 10:05:33
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections;
using System.Collections.Generic;

using AgileEAP.Core.Domain;
using AgileEAP.Core.Extensions;



namespace AgileEAP.Infrastructure.Domain
{
    public partial class Calendar :DomainObject<string>
    {
        #region Fields
		
		private short _type = default(Int16);
		private double _ownerOrg = default(Double);
		private int _year = default(Int32);
		private short _eventType = default(Int16);
		private string _description = string.Empty;
		private int _day = default(Int32);
		private string _creator = string.Empty;
		private System.DateTime _createTime = DateTime.Now;
		
		
        #endregion

        #region Constructors
		public Calendar(){}
		
		
		public Calendar(string id,short type,double ownerOrg,int year,short eventType,string description,int day,string creator,System.DateTime createTime)
		{
		  this.ID=id;
		this._type=type;
		this._ownerOrg=ownerOrg;
		this._year=year;
		this._eventType=eventType;
		this._description=description;
		this._day=day;
		this._creator=creator;
		this._createTime=createTime;
		}
        #endregion

        #region Methods

        public override int GetHashCode()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
            sb.Append(this.GetType().FullName);
			sb.Append(_type);
			sb.Append(_ownerOrg);
			sb.Append(_year);
			sb.Append(_eventType);
			sb.Append(_description);
			sb.Append(_day);
			sb.Append(_creator);
			sb.Append(_createTime);

            return sb.ToString().GetHashCode();
        }
		
		public virtual bool Validate()
        {
			return true;
        }

        #endregion

        #region Properties
		
		/// <summary>
        /// 间隔单位：天，位：天小时，分钟
        /// </summary>
		public virtual short Type
        {
            get { return  _type; }
			set	{	_type =  value;}
        }
		
		/// <summary>
        /// 所属机构
        /// </summary>
		public virtual double OwnerOrg
        {
            get { return  _ownerOrg; }
			set	{	_ownerOrg =  value;}
        }
		
		/// <summary>
        /// 年份
        /// </summary>
		public virtual int Year
        {
            get { return  _year; }
			set	{	_year =  value;}
        }
		
		/// <summary>
        /// 0表示请假，1表示加班
        /// </summary>
		public virtual short EventType
        {
            get { return  _eventType; }
			set	{	_eventType =  value;}
        }
		
		/// <summary>
        /// 描述
        /// </summary>
		public virtual string Description
        {
            get { return  _description; }
			set	{	_description =  value;}
        }
		
		/// <summary>
        /// 日期
        /// </summary>
		public virtual int Day
        {
            get { return  _day; }
			set	{	_day =  value;}
        }
		
		/// <summary>
        /// 创建者
        /// </summary>
		public virtual string Creator
        {
            get { return  _creator; }
			set	{	_creator =  value;}
        }
		
		/// <summary>
        /// 创建时间
        /// </summary>
		public virtual System.DateTime CreateTime
        {
            get { return  _createTime.ToSafeDateTime(); }
			set	{	_createTime =  value.ToSafeDateTime();}
        }
		
        #endregion
    }
}

#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Workflow
 * Module:  ProcessDef
 * Descrption:
 * CreateDate: 2010/11/18 12:00:09
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using AgileEAP.Core;
using AgileEAP.Core.Service;
using AgileEAP.Core.Security;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Web;
using AgileEAP.Core.Caching;
using AgileEAP.Core.FastInvoker;
using AgileEAP.WebControls;
using AgileEAP.Workflow.Domain;
using AgileEAP.Core.Utility;

using AgileEAP.Infrastructure.Service;
using AgileEAP.Infrastructure.Domain;

namespace AgileEAP.Plugin.Workflow
{
    public partial class ProcessDefManager : BasePage
    {
        #region ---界面处理方法---

        /// <summary>
        /// 初始化页面
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            gvList.PageChanged += new PagedGridView.PagintEventHandler(gvList_PageChanged);
        }

        void gvList_PageChanged(object sender, PagingArgs e)
        {
            ShowList(gvList, new PageInfo(e.PageIndex, e.PageSize, e.ItemCount));
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                //IList<DictItem> dictItems = AgileEAP.Core.Infrastructure.EngineContext.Current.Resolve<IUtilService>().GetDictItems("ProcessCategory");
                //ListItem li = new ListItem("请选择", "-1");
                //filterCategoryID.Items.Add(li);
                //foreach (var dictItem in dictItems)
                //{
                //    ListItem item = new ListItem();
                //    item.Text = dictItem.Text;
                //    item.Value = dictItem.Value;
                //    filterCategoryID.Items.Add(item);
                //}
                ShowList(gvList, new PageInfo(gvList.PageIndex, gvList.PageSize, gvList.ItemCount));
            }
        }

        #endregion

        #region ---操作处理方法---
        /// <summary>
        /// 转向明细页面
        /// </summary>
        /// <param name="param"></param>
        protected void Redirect(string param)
        {
            var currentIdParam = PageContext.Action == ActionType.Add ? string.Empty : string.Format("&CurrentId={0}", CurrentId);
            Response.Redirect(string.Format("ProcessDefDetail.aspx?LastUrl={0}&Runat=1&ActionFlag={1}{2}{3}", Request.Url.PathAndQuery, PageContext.Action, currentIdParam, string.IsNullOrEmpty(param) ? param : "&" + param));
        }

        /// <summary>
        /// 新增
        /// </summary>
        public void Add()
        {
            PageContext.Action = ActionType.Add;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }

        /// <summary>
        /// 查看
        /// </summary>
        public void View()
        {
            PageContext.Action = ActionType.View;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }

        /// <summary>
        /// 修改
        /// </summary>
        public void Update()
        {
            PageContext.Action = ActionType.Update;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }

        /// <summary>
        /// 查询
        /// </summary>
        public void Search()
        {
            ShowList(gvList, new PageInfo(1, gvList.PageSize, gvList.ItemCount));
        }

        /// <summary>
        /// 刷新
        /// </summary>
        public void Refresh()
        {
            ShowList(gvList, new PageInfo(gvList.PageIndex, gvList.PageSize, gvList.ItemCount));
        }

        public void Delete()
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            DoResult actionResult = DoResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                repository.Delete<ProcessDef>(CurrentId);
                actionResult = DoResult.Success;

                //获取提示信息
                actionMessage = "删除成功！";

                ajaxResult.RetValue = CurrentId;
                ajaxResult.PromptMsg = actionMessage;

                Refresh();
                ajaxResult.Result = actionResult;
            }
            catch (Exception ex)
            {
                actionMessage = "删除失败!";
                log.Error(actionMessage, ex);
            }

            WebUtil.PromptMsg(actionMessage);
        }

        /// <summary>
        /// 显示列表信息
        /// </summary>
        /// <param name="gvList">GridView对象</param>
        /// <param name="pageInfo">分页信息</param>
        public void ShowList(PagedGridView gvList, PageInfo pageInfo)
        {
            IPageOfList<ProcessDef> result = repository.FindAll<ProcessDef>(GetFilterParameters(), pageInfo);
            gvList.ItemCount = result.PageInfo.ItemCount;
            gvList.DataSource = result;
            gvList.DataBind();
        }
        /// <summary>
        /// 将当前状态改为“发布”
        /// </summary>
        /// <returns></returns>
        public string Publish(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            DoResult actionResult = DoResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                ProcessDef processDef = repository.GetDomain<ProcessDef>(argument);
                if (processDef != null)
                    processDef.CurrentState = 1; //已发布


                repository.SaveOrUpdate(processDef);
                repository.ClearCache<ProcessDef>();
                actionResult = DoResult.Success;

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                AddActionLog(processDef, actionResult, string.Format("发布流程{0}成功", processDef.Name));

                ajaxResult.Result = actionResult;


                ajaxResult.RetValue = RemarkAttribute.GetEnumRemark((AgileEAP.Workflow.Enums.ProcessStatus)Enum.Parse(typeof(AgileEAP.Workflow.Enums.ProcessStatus), processDef.CurrentState.ToString()));
                ajaxResult.PromptMsg = actionMessage;
            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }
        /// <summary>
        /// 将当前状态改为“停止”
        /// </summary>
        /// <returns></returns>
        public string Stop(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            DoResult actionResult = DoResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                ProcessDef processDef = repository.GetDomain<ProcessDef>(argument);
                if (processDef != null)
                    processDef.CurrentState = 2; //停止


                repository.SaveOrUpdate(processDef);
                repository.ClearCache<ProcessDef>();
                actionResult = DoResult.Success;

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                AddActionLog(processDef, actionResult, string.Format("停止流程{0}成功", processDef.Name));

                ajaxResult.Result = actionResult;


                ajaxResult.RetValue = RemarkAttribute.GetEnumRemark((AgileEAP.Workflow.Enums.ProcessStatus)Enum.Parse(typeof(AgileEAP.Workflow.Enums.ProcessStatus), processDef.CurrentState.ToString()));
                ajaxResult.PromptMsg = actionMessage;
            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }
        /// <summary>
        /// 转向活动管理页面ActivityManager.aspx
        /// </summary>
        public void ActivityManager()
        {
            PageContext.PageIndex = gvList.PageIndex;
            PageContext.PageSize = gvList.PageSize;
            PageContext.ItemCount = gvList.ItemCount;
            SavePageContext(PageContext);

            Response.Redirect(string.Format("ActivityManager.aspx?ProcessDefID={0}&Runat=1&Entry=Manager", CurrentId));
        }

        #endregion

        public string GetDictItemText(string value, string dict)
        {

            return value.GetDictItemText(dict);
        }
    }
}

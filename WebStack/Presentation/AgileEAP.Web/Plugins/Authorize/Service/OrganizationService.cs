#region Description
/*================================================================================
 *  Copyright (c) agile.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  Organization
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;


using AgileEAP.Core;
using AgileEAP.Core.Caching;
using AgileEAP.Core.Service;


using AgileEAP.Core.Utility;
using AgileEAP.Core.Extensions;
using AgileEAP.Core.Data;
using AgileEAP.Infrastructure.Domain;

namespace AgileEAP.Infrastructure.Service
{
    public class OrganizationService : BaseService<string, Organization>
    {
        #region Fields
        private readonly ILogger log = LogManager.GetLogger(typeof(OrganizationService));
        #endregion

        #region Constructors

        public OrganizationService() { }
        #endregion

        #region IOrganizationService Imp
        /// <summary>
        /// 获取顶级组织到当前组织的层级路径,以/分隔
        /// </summary>
        /// <param name="orgID"></param>
        public string GetOrgPath(string orgID)
        {
            var func = ExpressionUtil.MakeRecursion<string, string>(f => r =>
            {
                Organization org = new OrganizationService().All().FirstOrDefault(o => o.ID == r);
                if (org == null)
                    return string.Empty;

                if (string.IsNullOrEmpty(org.ParentID) || org.ParentID == "-1")
                    return org.ID;

                return string.Format("{0}/{1}", f(org.ParentID), org.ID);
            });

            return func(orgID);
        }

        /// <summary>
        /// 获取顶级组织到当前组织的编码层级路径,以/分隔
        /// </summary>
        /// <param name="orgCode"></param>
        public string GetOrgCodePath(string orgCode)
        {
            var func = ExpressionUtil.MakeRecursion<string, string>(f => r =>
            {
                Organization org = new OrganizationService().All().FirstOrDefault(o => o.Code == r);
                if (org == null)
                    return string.Empty;

                if (string.IsNullOrEmpty(org.ParentID) || org.ParentID == "-1")
                    return org.Code;

                return string.Format("{0}/{1}", f(org.ParentID), org.Code);
            });

            return func(orgCode);
        }

        /// <summary>
        /// 获取组织下的所有员工
        /// </summary>
        /// <param name="orgID">组织ID</param>
        /// <returns></returns>
        public IList<Employee> GetEmployees(string orgID)
        {
            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("ID", new Condition(string.Format("ID in (select b.EmployeeID from OM_EmployeeOrg b where b.OrgID='{0}')", orgID)));

            return repository.FindAll<Employee>(parameters);
        }

        /// <summary>
        /// 获取员工所在部门名称
        /// </summary>
        /// <param name="orgID">组织ID</param>
        /// <returns></returns>
        public IList<Organization> GetOrgNameByUserID(string userID)
        {
            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("ID", new Condition(string.Format("ID in (select b.OrgID from OM_EmployeeOrg b where b.EmployeeID='{0}')", userID)));

            return repository.FindAll<Organization>(parameters);
        }
        #endregion

        #region Internal Methods

        #endregion
    }
}